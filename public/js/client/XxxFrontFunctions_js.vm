/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)} )
##
#set ( $keyAttribs = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $keyAttribs = $keyAttribs + ", " )
#end
#set ( $keyAttribs = $keyAttribs + $key.name )
#end
##
#set ( $jsonWithKeyAttribs = "" )
#foreach ( $attrib in $entity.attributes )
#if ( $foreach.count > 1 )
#set ( $jsonWithKeyAttribs = $jsonWithKeyAttribs + "'${attrib.name}': this.${uncapitalizedEntityName}.${attrib.name}" + ",
                    " )
#else
#set ( $jsonWithKeyAttribs = $jsonWithKeyAttribs + "'${attrib.name}': this.${uncapitalizedEntityName}.${attrib.name},
                    " )
#end
#end
##
#set ( $jsonNullAttribs = "" )
#foreach ( $attrib in $entity.attributes )
#set ( $jsonNullAttribs = $jsonNullAttribs + "${attrib.name}: null,
                " )
#end
##
##
#set ( $jsonDataAttribs = "" )
#foreach ( $attrib in $entity.attributes )
#set ( $jsonDataAttribs = $jsonDataAttribs + "this.${uncapitalizedEntityName}.${attrib.name} = data.${attrib.name};
                " )
#end
##
#set ( $locationReplaceKeys = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $locationReplaceKeys = $locationReplaceKeys + " + '/' + this.${uncapitalizedEntityName}.${key.name}" )
#else
#set ( $locationReplaceKeys = $locationReplaceKeys + "this.${uncapitalizedEntityName}.${key.name}" )
#end
#end
##
#set ( $argsKeys = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $argsKeys = $argsKeys + " + '/' + ${key.name}" )
#else
#set ( $argsKeys = $argsKeys + "${key.name}" )
#end
#end
/**
 * $entity.name Front functions
 */

/**
 * Adds entity creation vue form
 */
function formAdd${entity.name}() {

    return new Vue({
        el: '#[[#]]#${uncapitalizedEntityName}Form',
        data: {
            ${uncapitalizedEntityName}: {},
            error: {
                errorCode: null,
                message: null,
                display: "none",
            },
        },
        methods: {
            save: function () {
                var $uncapitalizedEntityName = {
                    $jsonWithKeyAttribs
                };
                create(${uncapitalizedEntityName}, '${uncapitalizedEntityName}', function (err) {
                    if (err) {
                        this.error.errorCode = 'Error ' + err.responseJSON.errorCode;
                        this.error.message = err.responseJSON.message + '.';
                        this.error.display = "flex";
                        return;
                    }
                    window.location.replace(config.urlBase + '/${uncapitalizedEntityName}/');
                }.bind(this));
            }
        }
    });
}

/**
 * Adds entity details in a vue instance
 * @params $keyAttribs
 */
function show${entity.name}(${keyAttribs}) {

    return new Vue({
        el: '#[[#]]#${uncapitalizedEntityName}Panel',
        data: {
            ${uncapitalizedEntityName}: {
                $jsonNullAttribs
            }
        },
        created: function () {
            var url = config.urlApi + '/api/${uncapitalizedEntityName}/' + ${argsKeys};
            ${DOLLAR}.get(url, function (data) {
				$jsonDataAttribs
            }.bind(this));
        }
    });
}

/**
 * Adds all entities in a vue instance
 */
function showAll${entity.name}() {

    return new Vue({
        el: '#[[#]]#${uncapitalizedEntityName}Panel',
        data: {
            ${uncapitalizedEntityName}s: {}
        },
        created: function () {
            getAllServer('${uncapitalizedEntityName}', function (data) {
                    if(data[0]) {
                        this.${uncapitalizedEntityName}s = data;
                    }
            }.bind(this));
        }
    });
}

/**
 * Adds entity edition vue form
 * @params $keyAttribs
 */
function formEdit${entity.name}(${keyAttribs}) {

    return new Vue({
        el: '#[[#]]#${uncapitalizedEntityName}Form',
        data: {
            ${uncapitalizedEntityName}: {},
            error: {
                errorCode: null,
                message: null,
                display: "none",
            }
        },
        created: function () {
            getOneServer(${keyAttribs}, '${uncapitalizedEntityName}', function (data) {
                this.${uncapitalizedEntityName} = data;
            }.bind(this));
        },
        methods: {
            save: function (event) {
                var ${uncapitalizedEntityName} = {
                    $jsonWithKeyAttribs
                };
                update(${uncapitalizedEntityName}, '${uncapitalizedEntityName}', ${locationReplaceKeys}, function (err) {
                    if (err) {
                        this.error.errorCode = 'Error ' + err.responseJSON.errorCode;
                        this.error.message = err.responseJSON.message + '.';
                        this.error.display = "flex";
                        return;
                    }
                    window.location.replace(config.urlBase + '/${uncapitalizedEntityName}/show/' + ${locationReplaceKeys});
                }.bind(this));
            }
        }
    });
}

/**
 * IndexedDB & SQLite Entity deletion function
 * @params $keyAttribs
 */
function delete${entity.name}(${keyAttribs}) {
    deleteServer(${argsKeys}, '${uncapitalizedEntityName}', function (data) {
            window.location.replace(config.urlBase + '/${uncapitalizedEntityName}');
    });
}